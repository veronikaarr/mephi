# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from library_api.models.base_model_ import Model
from library_api.models.reader import Reader
from library_api.models.tasks import Tasks  # noqa: F401,E501
from library_api import util


class Ticket(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, unique_key: int=None, date_of_registration: date=None, tasks: List[Tasks]=None, reader: Reader=None):  # noqa: E501
        """Ticket - a model defined in Swagger

        :param unique_key: The unique_key of this Ticket.  # noqa: E501
        :type unique_key: int
        :param date_of_registration: The date_of_registration of this Ticket.  # noqa: E501
        :type date_of_registration: date
        :param tasks: The tasks of this Ticket.  # noqa: E501
        :type tasks: List[Tasks]
        :param reader: The reader of this Ticket.  # noqa: E501
        :type reader: Reader
        """
        self.swagger_types = {
            'unique_key': int,
            'date_of_registration': date,
            'tasks': List[Tasks],
            'reader': Reader
        }

        self.attribute_map = {
            'unique_key': 'unique_key',
            'date_of_registration': 'date_of_registration',
            'tasks': 'tasks',
            'reader': 'reader'
        }

        self._unique_key = unique_key
        self._date_of_registration = date_of_registration
        self._tasks = tasks
        self._reader = reader

    @classmethod
    def from_dict(cls, dikt) -> 'Ticket':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Ticket of this Ticket.  # noqa: E501
        :rtype: Ticket
        """
        return util.deserialize_model(dikt, cls)

    @property
    def unique_key(self) -> int:
        """Gets the unique_key of this Ticket.


        :return: The unique_key of this Ticket.
        :rtype: int
        """
        return self._unique_key

    @unique_key.setter
    def unique_key(self, unique_key: int):
        """Sets the unique_key of this Ticket.


        :param unique_key: The unique_key of this Ticket.
        :type unique_key: int
        """
        if unique_key is None:
            raise ValueError("Invalid value for `unique_key`, must not be `None`")  # noqa: E501

        self._unique_key = unique_key

    @property
    def date_of_registration(self) -> date:
        """Gets the date_of_registration of this Ticket.


        :return: The date_of_registration of this Ticket.
        :rtype: date
        """
        return self._date_of_registration

    @date_of_registration.setter
    def date_of_registration(self, date_of_registration: date):
        """Sets the date_of_registration of this Ticket.


        :param date_of_registration: The date_of_registration of this Ticket.
        :type date_of_registration: date
        """

        self._date_of_registration = date_of_registration

    @property
    def tasks(self) -> List[Tasks]:
        """Gets the tasks of this Ticket.


        :return: The tasks of this Ticket.
        :rtype: List[Tasks]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks: List[Tasks]):
        """Sets the tasks of this Ticket.


        :param tasks: The tasks of this Ticket.
        :type tasks: List[Tasks]
        """

        self._tasks = tasks

    def addTasks(self, value: Dict):
        self.tasks.append(value)
        return self.tasks

    def findTasksId(self, value: int):
        for task in self.tasks:
            if task.id == value:
                return task

    def findTasksDate(self, value: date):
        return [task for task in self.tasks if task.registration_date == value]

    def deleteTasks(self, value: date):
        tasks = self.tasks
        for i, task in enumerate(tasks):
            if task.id == value:
                del tasks[i]
                return tasks
    @property
    def reader(self) -> Reader:
        """Gets the reader of this Ticket.


        :return: The reader of this Ticket.
        :rtype: Reader
        """
        return self._reader

    @reader.setter
    def reader(self, reader: Reader):
        """Sets the reader of this Ticket.


        :param reader: The reader of this Ticket.
        :type reader: Reader
        """

        self._reader = reader