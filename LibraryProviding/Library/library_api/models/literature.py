# coding: utf-8

from __future__ import absolute_import
from library_api.models.electronic_literature_ import ElectronicLiterature
from library_api.models.material_literature_ import MaterialLiterature
# from library_api.controllers.helpers.classes import MaterialLiterature, ElectronicLiterature
from datetime import date, datetime  # noqa: F401

from library_api import util
from library_api.models.base_model_ import Model


class Literature(Model, ElectronicLiterature, MaterialLiterature):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, author: str=None, title: str=None, publishing_house: str=None, year_publishing: str=None):  # noqa: E501
        """Literature - a model defined in Swagger

        :param id: The id of this Literature.  # noqa: E501
        :type id: int
        :param author: The author of this Literature.  # noqa: E501
        :type author: str
        :param title: The title of this Literature.  # noqa: E501
        :type title: str
        :param publishing_house: The publishing_house of this Literature.  # noqa: E501
        :type publishing_house: str
        :param year_publishing: The year_publishing of this Literature.  # noqa: E501
        :type year_publishing: str
        """
        self.swagger_types = {
            'id': int,
            'author': str,
            'title': str,
            'publishing_house': str,
            'year_publishing': str
        }

        self.attribute_map = {
            'id': 'id',
            'author': 'author',
            'title': 'title',
            'publishing_house': 'publishing_house',
            'year_publishing': 'year_publishing'
        }

        self._id = id
        self._author = author
        self._title = title
        self._publishing_house = publishing_house
        self._year_publishing = year_publishing

    @classmethod
    def from_dict(cls, dikt) -> 'Literature':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Literature of this Literature.  # noqa: E501
        :rtype: Literature
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Literature.


        :return: The id of this Literature.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Literature.


        :param id: The id of this Literature.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def author(self) -> str:
        """Gets the author of this Literature.


        :return: The author of this Literature.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author: str):
        """Sets the author of this Literature.


        :param author: The author of this Literature.
        :type author: str
        """

        self._author = author

    @property
    def title(self) -> str:
        """Gets the title of this Literature.


        :return: The title of this Literature.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Literature.


        :param title: The title of this Literature.
        :type title: str
        """

        self._title = title

    @property
    def publishing_house(self) -> str:
        """Gets the publishing_house of this Literature.


        :return: The publishing_house of this Literature.
        :rtype: str
        """
        return self._publishing_house

    @publishing_house.setter
    def publishing_house(self, publishing_house: str):
        """Sets the publishing_house of this Literature.


        :param publishing_house: The publishing_house of this Literature.
        :type publishing_house: str
        """

        self._publishing_house = publishing_house

    @property
    def year_publishing(self) -> str:
        """Gets the year_publishing of this Literature.


        :return: The year_publishing of this Literature.
        :rtype: str
        """
        return self._year_publishing

    @year_publishing.setter
    def year_publishing(self, year_publishing: str):
        """Sets the year_publishing of this Literature.


        :param year_publishing: The year_publishing of this Literature.
        :type year_publishing: str
        """

        self._year_publishing = year_publishing