# coding: utf-8

from __future__ import absolute_import
from datetime import date  # noqa: F401

from typing import List, Dict  # noqa: F401

from library_api.models.base_model_ import Model
from library_api.models.order_book import OrderBook  # noqa: F401,E501
from library_api import util
from datetime import timedelta


class Tasks(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, order_book_list: List[OrderBook]=None, registration_date: date=None, expect_return_date: date=None):  # noqa: E501
        """Tasks - a model defined in Swagger

        :param id: The id of this Tasks.  # noqa: E501
        :type id: int
        :param order_book_list: The order_book_list of this Tasks.  # noqa: E501
        :type order_book_list: List[OrderBook]
        :param registration_date: The registration_date of this Tasks.  # noqa: E501
        :type registration_date: date
        :param expect_return_date: The expect_return_date of this Tasks.  # noqa: E501
        :type expect_return_date: date
        """
        self.swagger_types = {
            'id': int,
            'order_book_list': List[OrderBook],
            'registration_date': date,
            'expect_return_date': date
        }

        self.attribute_map = {
            'id': 'id',
            'order_book_list': 'order_book_list',
            'registration_date': 'registration_date',
            'expect_return_date': 'expect_return_date'
        }

        self._id = id
        self._order_book_list = order_book_list
        self._registration_date = registration_date
        self._expect_return_date = expect_return_date

    @classmethod
    def from_dict(cls, dikt) -> 'Tasks':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Tasks of this Tasks.  # noqa: E501
        :rtype: Tasks
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Tasks.


        :return: The id of this Tasks.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Tasks.


        :param id: The id of this Tasks.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def order_book_list(self) -> List[OrderBook]:
        """Gets the order_book_list of this Tasks.


        :return: The order_book_list of this Tasks.
        :rtype: List[OrderBook]
        """
        return self._order_book_list

    @order_book_list.setter
    def order_book_list(self, order_book_list: List[OrderBook]):
        """Sets the order_book_list of this Tasks.


        :param order_book_list: The order_book_list of this Tasks.
        :type order_book_list: List[OrderBook]
        """

        self._order_book_list = order_book_list

    def addOrderBooksList(self, value):
        order_book_list = self.order_book_list
        print(order_book_list)
        if len(order_book_list) != 0:
            for i in order_book_list:
                if value.id_literature.id == i.id_literature.id:
                    raise ValueError("Value already used")
        if len(order_book_list) >= 5:
            raise ValueError("Len tasks more, then 5")
        order_book_list.append(value)
        return order_book_list

    def findOrderBooksListStatus(self, value: int):
        return [order_book for order_book in self.order_book_list if order_book.status == value]

    def findOrderBooksListId(self, value):
        for order_book in self.order_book_list:
            if order_book.id_literature.id == value:
                return order_book

    def deleteOrderBooksList(self, value: int):
        order_book_list = self.order_book_list
        for i, task in enumerate(order_book_list):
            if task.id_literature.id == value:
                del order_book_list[i]
                return order_book_list

    @property
    def registration_date(self) -> date:
        """Gets the registration_date of this Tasks.


        :return: The registration_date of this Tasks.
        :rtype: date
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date: date):
        """Sets the registration_date of this Tasks.


        :param registration_date: The registration_date of this Tasks.
        :type registration_date: date
        """
        self._expect_return_date = registration_date + timedelta(days=14)
        self._registration_date = registration_date

    @property
    def expect_return_date(self) -> date:
        """Gets the expect_return_date of this Tasks.


        :return: The expect_return_date of this Tasks.
        :rtype: date
        """
        return self._expect_return_date

    @expect_return_date.setter
    def expect_return_date(self, expect_return_date: date):
        """Sets the expect_return_date of this Tasks.


        :param expect_return_date: The expect_return_date of this Tasks.
        :type expect_return_date: date
        """
        self.expect_return_date = expect_return_date
